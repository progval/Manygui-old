The from manygui.backends.foogui import * solution doesn't really work
as described in the docs...

In wxgui, RadioButtons need to have a group when they are created -
otherwise they won't work properly. Thus they cannot be moved from
RadioGroup to RadioGroup.

In wxgui, the text cursor doesn't seem to want to leave non-editable
text areas and text fields... It keeps moving around to the correct
position (but in the wrong field) if one (after having selected
portions of an uneditable field) selects parts of an editable field.
The bug sometimes goes the other way too (not leaving the editable
field). It may not have anything to do with the "editability" at
all... (See test_textfield and test_textarea.)

javagui layout is extremely slow. Also, some components may not be
visible before the window is resized (the TextArea in test_defaults,
for instance). This has not always been so, and is probably caused by
a bug. (This may in part be because windows are shown before their
contents has been placed properly. That can be fixed by rearranging
the order in which the _ensure_* methods are called, by calling
_ensure_visible last, for instance.)

test_defaults doesn't place the text field correctly in tkinter in
MacPython. It works with tkinter in Windows, though.

Windows created after app.run() seem to have only default geometry
(i.e. size == (0, 0)) in tkgui/MacPython.

test_references.py and test_events don't work in Jython 2.1b1.
(References and Events should still work, though...)

When moving the mouse out of a text area in tkgui, the selection is
lost.

jknapka: this is not actually true. However, on Windows (not
Unix), the visual indication of the selection is erased.  The
selection is still present, however.

mlh: the selection is not properly set, though... (That goes for more
backends, actually, e.g. javagui.)

id() is broken in Jython and will probably not be fixed soon.  This
will probably not affect the correctness of the hashing of references
(in manygui.References), but care should be taken not to store things
with id(obj) as key. [mlh20020103: It *does* affect the current
hashing, which should be rewritten.]

Compiling Manygui apps to jar files seems problematic in Jython, giving
the error "manygui clashes with package of same name".

Label alignment (both vertical and horizontal) varies across backends.

Setting tf.text moves selection to the end of textfields/textareas in
javagui.

In test_textarea, the update button doesn't capture the selection
properly in javagui.

Tabbing between fields and/or other controls doesn't work in mswgui.

Alt-F4 doesn't work for javagui Windows in MS Windows.

The cursor position and the end marker of the selection should always
be the same in tkgui. That is not currently the case.

Selecting items in a ListBox with the arrow keys in javagui doesn't
cause the callback to be activated. (Using the JListModel in a more
conventional way would help, but would cause the callback to be called
when the selection is set programmatically, which is not the desired
behaviour.)

The backends don't behave consistently wrt. setting or not setting
focus when the selection of a TextField or TextArea is set
programmatically.

Focus of TextArea is not displayed properly under beosgui - click on
another window and back again to see selection/cursor. [Bug belongs to
Bethon]

test/test.py crashes under systems where more than one application
object is not permitted.  [beosgui and wxgui]

RadioGroups don't work properly under BeOS.  BeOS will not allow
multiple groups within the one view - hence, at this stage, all radio
buttons are in the same group.

All List- and Text- Views always have scrollbars under BeOS. (Similar
behaviour in other backends.)

beosgui.py does not implement _ensure_destroyed(). This will prevent
objects from being removed from a container, and/or moved between
containers.

In cursesgui/textgui, text controls are always editable, even if
_editable == 0. It seems _ensure_editable() never being called.

z-ordering of widgets is not consistent across backends.
